-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity encode is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    u_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    u_ce0 : OUT STD_LOGIC;
    u_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    cw_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    cw_ce0 : OUT STD_LOGIC;
    cw_we0 : OUT STD_LOGIC;
    cw_d0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of encode is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "encode,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.098500,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=5,HLS_SYN_DSP=0,HLS_SYN_FF=340,HLS_SYN_LUT=814,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv12_400 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_7F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001111111";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv6_26 : STD_LOGIC_VECTOR (5 downto 0) := "100110";
    constant ap_const_lv8_26 : STD_LOGIC_VECTOR (7 downto 0) := "00100110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv11_80 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_const_lv7_4C : STD_LOGIC_VECTOR (6 downto 0) := "1001100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv12_800 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal P_Qc_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal P_Qc_ce0 : STD_LOGIC;
    signal P_Qc_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln899_fu_373_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln899_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal nn_fu_396_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal nn_reg_672 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln908_fu_402_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln908_reg_677 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln906_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mm_fu_412_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal mm_reg_685 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln908_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln914_fu_454_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln914_reg_695 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln914_1_fu_469_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln914_1_reg_700 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln914_2_fu_479_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln914_2_reg_706 : STD_LOGIC_VECTOR (31 downto 0);
    signal P_Qc_load_reg_712 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln912_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln912_reg_717 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_495_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_3_reg_724 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal j_3_fu_507_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_3_reg_732 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal cc_addr_reg_737 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln914_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln914_1_fu_518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_2_fu_528_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_2_reg_750 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_539_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_1_reg_758 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal cc_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal cc_load_reg_763 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal i_2_fu_551_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_2_reg_771 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln19_fu_545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_addr_2_reg_784 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal icmp_ln920_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_4_fu_583_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_4_reg_792 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal icmp_ln920_1_fu_577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_3_fu_594_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ia_fu_606_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ia_reg_810 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal zext_ln932_fu_612_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln932_reg_815 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln929_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cw_addr_1_reg_828 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal icmp_ln934_fu_617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_634_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_reg_836 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal icmp_ln934_1_fu_628_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_645_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_ce0 : STD_LOGIC;
    signal p_we0 : STD_LOGIC;
    signal p_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal cc_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal cc_ce0 : STD_LOGIC;
    signal cc_we0 : STD_LOGIC;
    signal cc_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln899_reg_231 : STD_LOGIC_VECTOR (9 downto 0);
    signal nn_0_reg_242 : STD_LOGIC_VECTOR (3 downto 0);
    signal mm_0_reg_253 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln910_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i1_0_reg_264 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_0_reg_275 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_0_reg_286 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_0_i_reg_295 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_0_i_i_reg_306 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal k_1_reg_318 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln28_fu_534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_reg_328 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ia_0_reg_339 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal i_0_reg_350 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_2_reg_362 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal zext_ln899_fu_379_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln912_fu_449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln916_fu_513_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln916_fu_523_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln20_fu_557_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln20_1_fu_562_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln922_fu_572_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln922_fu_589_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln937_fu_623_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln937_1_fu_640_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl_cast_fu_418_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl2_cast_fu_428_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln912_fu_438_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln912_fu_444_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal k_fu_458_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln914_fu_465_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln914_fu_473_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);

    component encode_P_Qc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component encode_p IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component encode_cc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    P_Qc_U : component encode_P_Qc
    generic map (
        DataWidth => 8,
        AddressRange => 7296,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => P_Qc_address0,
        ce0 => P_Qc_ce0,
        q0 => P_Qc_q0);

    p_U : component encode_p
    generic map (
        DataWidth => 1,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_address0,
        ce0 => p_ce0,
        we0 => p_we0,
        d0 => p_d0,
        q0 => p_q0);

    cc_U : component encode_cc
    generic map (
        DataWidth => 1,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cc_address0,
        ce0 => cc_ce0,
        we0 => cc_we0,
        d0 => cc_d0,
        q0 => cc_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i1_0_reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i1_0_reg_264 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and ((icmp_ln920_fu_567_p2 = ap_const_lv1_0) or (icmp_ln912_reg_717 = ap_const_lv1_1)))) then 
                i1_0_reg_264 <= i_3_reg_724;
            end if; 
        end if;
    end process;

    i_0_i_i_reg_306_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                i_0_i_i_reg_306 <= i_2_reg_771;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_0_i_i_reg_306 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    i_0_i_reg_295_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln914_fu_501_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i_0_i_reg_295 <= ap_const_lv8_0;
            elsif (((icmp_ln19_fu_545_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                i_0_i_reg_295 <= i_1_reg_758;
            end if; 
        end if;
    end process;

    i_0_reg_350_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln929_fu_600_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                i_0_reg_350 <= ap_const_lv12_400;
            elsif (((icmp_ln934_1_fu_628_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                i_0_reg_350 <= i_fu_645_p2;
            end if; 
        end if;
    end process;

    ia_0_reg_339_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln906_fu_390_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                ia_0_reg_339 <= ap_const_lv11_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                ia_0_reg_339 <= ia_reg_810;
            end if; 
        end if;
    end process;

    j_0_reg_275_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln910_fu_489_p2 = ap_const_lv1_0) and (icmp_ln912_reg_717 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                j_0_reg_275 <= ap_const_lv8_0;
            elsif (((icmp_ln914_1_fu_518_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                j_0_reg_275 <= j_3_reg_732;
            end if; 
        end if;
    end process;

    j_1_reg_328_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln912_reg_717 = ap_const_lv1_0) and (icmp_ln920_fu_567_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                j_1_reg_328 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                j_1_reg_328 <= j_4_reg_792;
            end if; 
        end if;
    end process;

    j_2_reg_362_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln934_fu_617_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                j_2_reg_362 <= ap_const_lv11_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                j_2_reg_362 <= j_reg_836;
            end if; 
        end if;
    end process;

    k_0_reg_286_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                k_0_reg_286 <= k_2_reg_750;
            elsif (((icmp_ln914_fu_501_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                k_0_reg_286 <= zext_ln914_1_reg_700;
            end if; 
        end if;
    end process;

    k_1_reg_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln28_fu_534_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                k_1_reg_318 <= zext_ln914_1_reg_700;
            elsif (((icmp_ln920_1_fu_577_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                k_1_reg_318 <= k_3_fu_594_p2;
            end if; 
        end if;
    end process;

    mm_0_reg_253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln910_fu_489_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                mm_0_reg_253 <= mm_reg_685;
            elsif (((icmp_ln906_fu_390_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                mm_0_reg_253 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    nn_0_reg_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln908_fu_406_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                nn_0_reg_242 <= nn_reg_672;
            elsif (((icmp_ln899_fu_384_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                nn_0_reg_242 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    phi_ln899_reg_231_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_ln899_reg_231 <= ap_const_lv10_0;
            elsif (((icmp_ln899_fu_384_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_ln899_reg_231 <= add_ln899_fu_373_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                P_Qc_load_reg_712 <= P_Qc_q0;
                icmp_ln912_reg_717 <= icmp_ln912_fu_483_p2;
                    zext_ln914_1_reg_700(9 downto 7) <= zext_ln914_1_fu_469_p1(9 downto 7);
                    zext_ln914_2_reg_706(10 downto 7) <= zext_ln914_2_fu_479_p1(10 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln914_fu_501_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                cc_addr_reg_737 <= zext_ln916_fu_513_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                cc_load_reg_763 <= cc_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln934_fu_617_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                cw_addr_1_reg_828 <= zext_ln937_fu_623_p1(11 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                i_1_reg_758 <= i_1_fu_539_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                i_2_reg_771 <= i_2_fu_551_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_3_reg_724 <= i_3_fu_495_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                ia_reg_810 <= ia_fu_606_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                j_3_reg_732 <= j_3_fu_507_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                j_4_reg_792 <= j_4_fu_583_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                j_reg_836 <= j_fu_634_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln914_1_fu_518_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                k_2_reg_750 <= k_2_fu_528_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                mm_reg_685 <= mm_fu_412_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                nn_reg_672 <= nn_fu_396_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln912_reg_717 = ap_const_lv1_0) and (icmp_ln920_fu_567_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                p_addr_2_reg_784 <= sext_ln922_fu_572_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln908_fu_406_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                trunc_ln914_reg_695 <= trunc_ln914_fu_454_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln906_fu_390_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    zext_ln908_reg_677(3 downto 0) <= zext_ln908_fu_402_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln929_fu_600_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    zext_ln932_reg_815(10 downto 0) <= zext_ln932_fu_612_p1(10 downto 0);
            end if;
        end if;
    end process;
    zext_ln908_reg_677(13 downto 4) <= "0000000000";
    zext_ln914_1_reg_700(6 downto 0) <= "0000000";
    zext_ln914_1_reg_700(31 downto 10) <= "0000000000000000000000";
    zext_ln914_2_reg_706(6 downto 0) <= "0000000";
    zext_ln914_2_reg_706(31 downto 11) <= "000000000000000000000";
    zext_ln932_reg_815(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln899_fu_384_p2, ap_CS_fsm_state3, icmp_ln906_fu_390_p2, ap_CS_fsm_state4, icmp_ln908_fu_406_p2, icmp_ln912_reg_717, ap_CS_fsm_state6, ap_CS_fsm_state7, icmp_ln914_fu_501_p2, ap_CS_fsm_state8, icmp_ln914_1_fu_518_p2, ap_CS_fsm_state10, ap_CS_fsm_state12, icmp_ln19_fu_545_p2, ap_CS_fsm_state14, icmp_ln920_fu_567_p2, ap_CS_fsm_state15, icmp_ln920_1_fu_577_p2, ap_CS_fsm_state17, icmp_ln929_fu_600_p2, ap_CS_fsm_state19, icmp_ln934_fu_617_p2, ap_CS_fsm_state20, icmp_ln934_1_fu_628_p2, icmp_ln910_fu_489_p2, icmp_ln28_fu_534_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln899_fu_384_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln906_fu_390_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln908_fu_406_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln910_fu_489_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif (((icmp_ln910_fu_489_p2 = ap_const_lv1_0) and (icmp_ln912_reg_717 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln914_fu_501_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((icmp_ln914_1_fu_518_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state10 => 
                if (((icmp_ln28_fu_534_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((icmp_ln19_fu_545_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and ((icmp_ln920_fu_567_p2 = ap_const_lv1_0) or (icmp_ln912_reg_717 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                if (((icmp_ln920_1_fu_577_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state17 => 
                if (((icmp_ln929_fu_600_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state19 => 
                if (((icmp_ln934_fu_617_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                if (((icmp_ln934_1_fu_628_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    P_Qc_address0 <= zext_ln912_fu_449_p1(13 - 1 downto 0);

    P_Qc_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            P_Qc_ce0 <= ap_const_logic_1;
        else 
            P_Qc_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln899_fu_373_p2 <= std_logic_vector(unsigned(phi_ln899_reg_231) + unsigned(ap_const_lv10_1));
    add_ln912_fu_444_p2 <= std_logic_vector(unsigned(sub_ln912_fu_438_p2) + unsigned(zext_ln908_reg_677));
    add_ln914_fu_473_p2 <= std_logic_vector(unsigned(ap_const_lv11_80) + unsigned(zext_ln914_fu_465_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state19, icmp_ln934_fu_617_p2)
    begin
        if (((icmp_ln934_fu_617_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state19, icmp_ln934_fu_617_p2)
    begin
        if (((icmp_ln934_fu_617_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    cc_address0_assign_proc : process(cc_addr_reg_737, ap_CS_fsm_state10, ap_CS_fsm_state12, icmp_ln19_fu_545_p2, ap_CS_fsm_state15, ap_CS_fsm_state9, ap_CS_fsm_state13, zext_ln20_fu_557_p1, zext_ln20_1_fu_562_p1, zext_ln922_fu_589_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            cc_address0 <= zext_ln922_fu_589_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            cc_address0 <= zext_ln20_1_fu_562_p1(7 - 1 downto 0);
        elsif (((icmp_ln19_fu_545_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            cc_address0 <= ap_const_lv64_7F(7 - 1 downto 0);
        elsif (((icmp_ln19_fu_545_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            cc_address0 <= zext_ln20_fu_557_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            cc_address0 <= ap_const_lv64_0(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cc_address0 <= cc_addr_reg_737;
        else 
            cc_address0 <= "XXXXXXX";
        end if; 
    end process;


    cc_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state12, icmp_ln19_fu_545_p2, ap_CS_fsm_state15, ap_CS_fsm_state9, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((icmp_ln19_fu_545_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((icmp_ln19_fu_545_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            cc_ce0 <= ap_const_logic_1;
        else 
            cc_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cc_d0_assign_proc : process(u_q0, cc_q0, cc_load_reg_763, ap_CS_fsm_state12, icmp_ln19_fu_545_p2, ap_CS_fsm_state9, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            cc_d0 <= cc_q0;
        elsif (((icmp_ln19_fu_545_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            cc_d0 <= cc_load_reg_763;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cc_d0 <= u_q0;
        else 
            cc_d0 <= "X";
        end if; 
    end process;


    cc_we0_assign_proc : process(ap_CS_fsm_state12, icmp_ln19_fu_545_p2, ap_CS_fsm_state9, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((icmp_ln19_fu_545_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            cc_we0 <= ap_const_logic_1;
        else 
            cc_we0 <= ap_const_logic_0;
        end if; 
    end process;


    cw_address0_assign_proc : process(zext_ln932_reg_815, cw_addr_1_reg_828, ap_CS_fsm_state18, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            cw_address0 <= cw_addr_1_reg_828;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            cw_address0 <= zext_ln932_reg_815(11 - 1 downto 0);
        else 
            cw_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    cw_ce0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            cw_ce0 <= ap_const_logic_1;
        else 
            cw_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cw_d0_assign_proc : process(u_q0, p_q0, ap_CS_fsm_state18, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            cw_d0 <= p_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            cw_d0 <= u_q0;
        else 
            cw_d0 <= "X";
        end if; 
    end process;


    cw_we0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            cw_we0 <= ap_const_logic_1;
        else 
            cw_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_1_fu_539_p2 <= std_logic_vector(unsigned(i_0_i_reg_295) + unsigned(ap_const_lv8_1));
    i_2_fu_551_p2 <= std_logic_vector(unsigned(i_0_i_i_reg_306) + unsigned(ap_const_lv7_1));
    i_3_fu_495_p2 <= std_logic_vector(unsigned(i1_0_reg_264) + unsigned(ap_const_lv7_1));
    i_fu_645_p2 <= std_logic_vector(unsigned(i_0_reg_350) + unsigned(ap_const_lv12_1));
    ia_fu_606_p2 <= std_logic_vector(unsigned(ia_0_reg_339) + unsigned(ap_const_lv11_1));
    icmp_ln19_fu_545_p2 <= "1" when (i_0_i_i_reg_306 = ap_const_lv7_7F) else "0";
    icmp_ln28_fu_534_p2 <= "1" when (i_0_i_reg_295 = P_Qc_load_reg_712) else "0";
    icmp_ln899_fu_384_p2 <= "1" when (phi_ln899_reg_231 = ap_const_lv10_3FF) else "0";
    icmp_ln906_fu_390_p2 <= "1" when (nn_0_reg_242 = ap_const_lv4_C) else "0";
    icmp_ln908_fu_406_p2 <= "1" when (mm_0_reg_253 = ap_const_lv4_8) else "0";
    icmp_ln910_fu_489_p2 <= "1" when (i1_0_reg_264 = ap_const_lv7_4C) else "0";
    icmp_ln912_fu_483_p2 <= "1" when (P_Qc_q0 = ap_const_lv8_0) else "0";
    icmp_ln914_1_fu_518_p2 <= "1" when (signed(k_0_reg_286) < signed(zext_ln914_2_reg_706)) else "0";
    icmp_ln914_fu_501_p2 <= "1" when (j_0_reg_275 = ap_const_lv8_80) else "0";
    icmp_ln920_1_fu_577_p2 <= "1" when (j_1_reg_328 = ap_const_lv8_80) else "0";
    icmp_ln920_fu_567_p2 <= "1" when (signed(k_1_reg_318) < signed(zext_ln914_2_reg_706)) else "0";
    icmp_ln929_fu_600_p2 <= "1" when (ia_0_reg_339 = ap_const_lv11_400) else "0";
    icmp_ln934_1_fu_628_p2 <= "1" when (j_2_reg_362 = ap_const_lv11_400) else "0";
    icmp_ln934_fu_617_p2 <= "1" when (i_0_reg_350 = ap_const_lv12_800) else "0";
    j_3_fu_507_p2 <= std_logic_vector(unsigned(j_0_reg_275) + unsigned(ap_const_lv8_1));
    j_4_fu_583_p2 <= std_logic_vector(unsigned(j_1_reg_328) + unsigned(ap_const_lv8_1));
    j_fu_634_p2 <= std_logic_vector(unsigned(j_2_reg_362) + unsigned(ap_const_lv11_1));
    k_2_fu_528_p2 <= std_logic_vector(signed(k_0_reg_286) + signed(ap_const_lv32_1));
    k_3_fu_594_p2 <= std_logic_vector(signed(k_1_reg_318) + signed(ap_const_lv32_1));
    k_fu_458_p3 <= (trunc_ln914_reg_695 & ap_const_lv7_0);
    mm_fu_412_p2 <= std_logic_vector(unsigned(mm_0_reg_253) + unsigned(ap_const_lv4_1));
    nn_fu_396_p2 <= std_logic_vector(unsigned(nn_0_reg_242) + unsigned(ap_const_lv4_1));

    p_address0_assign_proc : process(ap_CS_fsm_state2, p_addr_2_reg_784, ap_CS_fsm_state20, ap_CS_fsm_state16, zext_ln899_fu_379_p1, zext_ln937_1_fu_640_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            p_address0 <= zext_ln937_1_fu_640_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            p_address0 <= p_addr_2_reg_784;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_address0 <= zext_ln899_fu_379_p1(10 - 1 downto 0);
        else 
            p_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    p_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state20, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            p_ce0 <= ap_const_logic_1;
        else 
            p_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_d0_assign_proc : process(ap_CS_fsm_state2, cc_q0, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            p_d0 <= cc_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_d0 <= ap_const_lv1_0;
        else 
            p_d0 <= "X";
        end if; 
    end process;

    p_shl2_cast_fu_428_p4 <= ((ap_const_lv8_26 & mm_0_reg_253) & ap_const_lv2_0);
    p_shl_cast_fu_418_p4 <= ((ap_const_lv6_26 & mm_0_reg_253) & ap_const_lv4_0);

    p_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            p_we0 <= ap_const_logic_1;
        else 
            p_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln916_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(k_0_reg_286),64));

        sext_ln922_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(k_1_reg_318),64));

    sub_ln912_fu_438_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_418_p4) - unsigned(p_shl2_cast_fu_428_p4));
    trunc_ln914_fu_454_p1 <= mm_0_reg_253(3 - 1 downto 0);

    u_address0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state17, zext_ln932_fu_612_p1, sext_ln916_fu_523_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            u_address0 <= zext_ln932_fu_612_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            u_address0 <= sext_ln916_fu_523_p1(10 - 1 downto 0);
        else 
            u_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    u_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            u_ce0 <= ap_const_logic_1;
        else 
            u_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln20_1_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i_reg_306),64));
    zext_ln20_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_fu_551_p2),64));
    zext_ln899_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln899_reg_231),64));
    zext_ln908_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nn_0_reg_242),14));
    zext_ln912_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln912_fu_444_p2),64));
    zext_ln914_1_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_fu_458_p3),32));
    zext_ln914_2_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln914_fu_473_p2),32));
    zext_ln914_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_fu_458_p3),11));
    zext_ln916_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_275),64));
    zext_ln922_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_328),64));
    zext_ln932_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ia_0_reg_339),64));
    zext_ln937_1_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_2_reg_362),64));
    zext_ln937_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_350),64));
end behav;
