-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity LastVN is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Lcn_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    Lcn_ce0 : OUT STD_LOGIC;
    Lcn_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    data_ce0 : OUT STD_LOGIC;
    data_we0 : OUT STD_LOGIC;
    data_d0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of LastVN is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "LastVN,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.634000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=20,HLS_SYN_DSP=4,HLS_SYN_FF=1163,HLS_SYN_LUT=1535,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (30 downto 0) := "0000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (30 downto 0) := "0000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (30 downto 0) := "0000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (30 downto 0) := "0000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (30 downto 0) := "0000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (30 downto 0) := "0000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (30 downto 0) := "0001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (30 downto 0) := "0010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (30 downto 0) := "0100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (30 downto 0) := "1000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv12_9FF : STD_LOGIC_VECTOR (11 downto 0) := "100111111111";
    constant ap_const_lv12_A00 : STD_LOGIC_VECTOR (11 downto 0) := "101000000000";
    constant ap_const_lv13_1E00 : STD_LOGIC_VECTOR (12 downto 0) := "1111000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv14_3FFF : STD_LOGIC_VECTOR (13 downto 0) := "11111111111111";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv15_2F0 : STD_LOGIC_VECTOR (14 downto 0) := "000001011110000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal col_inx_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal col_inx_ce0 : STD_LOGIC;
    signal col_inx_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal Lch_n_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal Lch_n_ce0 : STD_LOGIC;
    signal Lch_n_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal LUT_decoder1_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal LUT_decoder1_ce0 : STD_LOGIC;
    signal LUT_decoder1_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_621_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_629 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln125_fu_794_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln128_fu_805_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_reg_1357 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln229_fu_846_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln35_fu_635_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln35_fu_646_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_663_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_reg_1332 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln96_fu_669_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln96_reg_1338 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln89_fu_657_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_679_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal j_reg_1346 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln93_fu_673_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_fu_690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal num_connected_CN_1_fu_700_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln96_fu_695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln133_fu_711_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln133_reg_1369 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal num_connected_CN_fu_731_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_connected_CN_reg_1384 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal LUT_tem1_addr_reg_1389 : STD_LOGIC_VECTOR (3 downto 0);
    signal L_in1_1_load_reg_1394 : STD_LOGIC_VECTOR (31 downto 0);
    signal pun_tem1_0_load_reg_1400 : STD_LOGIC_VECTOR (31 downto 0);
    signal LUT_cnt_1_load_reg_1405 : STD_LOGIC_VECTOR (31 downto 0);
    signal j2_fu_799_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal j2_reg_1416 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln165_fu_816_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln165_reg_1429 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln171_fu_820_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln171_reg_1435 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal L_in1_5_reg_1445 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln241_fu_852_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln241_reg_1454 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln246_fu_856_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln246_reg_1460 : STD_LOGIC_VECTOR (14 downto 0);
    signal i8_fu_866_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i8_reg_1468 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal zext_ln260_fu_880_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln260_reg_1473 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln259_fu_860_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i7_fu_890_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i7_reg_1481 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln247_fu_904_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln247_reg_1486 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln246_fu_884_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j8_fu_951_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j8_reg_1499 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal add_ln262_fu_961_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln262_reg_1504 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln260_fu_945_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal j7_fu_988_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j7_reg_1518 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal add_ln249_fu_998_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln249_reg_1523 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln247_fu_982_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln249_fu_1270_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln249_reg_1528 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal add_ln249_2_fu_1016_p2 : STD_LOGIC_VECTOR (14 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln249_2_fu_1016_p2 : signal is "no";
    signal add_ln249_2_reg_1539 : STD_LOGIC_VECTOR (14 downto 0);
    signal cnt_Rp_1_fu_1038_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal L_1_fu_1044_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln283_fu_1054_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal select_ln283_1_fu_1062_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i5_fu_1080_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i5_reg_1567 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal zext_ln184_fu_1094_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln184_reg_1572 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln183_fu_1074_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i4_fu_1104_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i4_reg_1580 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln172_fu_1118_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln172_reg_1585 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln171_fu_1098_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j5_fu_1133_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j5_reg_1593 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal add_ln186_fu_1143_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln186_reg_1598 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln184_fu_1127_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal j4_fu_1170_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j4_reg_1612 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal add_ln174_fu_1180_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln174_reg_1617 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln172_fu_1164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln174_fu_1284_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln174_reg_1622 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal add_ln174_2_fu_1198_p2 : STD_LOGIC_VECTOR (14 downto 0);
    attribute use_dsp48 of add_ln174_2_fu_1198_p2 : signal is "no";
    signal add_ln174_2_reg_1633 : STD_LOGIC_VECTOR (14 downto 0);
    signal cnt_Rp_fu_1220_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal L_fu_1226_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ii_fu_1251_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ii_reg_1651 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal zext_ln318_fu_1257_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln318_reg_1656 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln316_fu_1245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Estimated_bit_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal Estimated_bit_ce0 : STD_LOGIC;
    signal Estimated_bit_we0 : STD_LOGIC;
    signal Estimated_bit_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal Estimated_bit_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal inx_CN_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal inx_CN_ce0 : STD_LOGIC;
    signal inx_CN_we0 : STD_LOGIC;
    signal inx_CN_d0 : STD_LOGIC_VECTOR (12 downto 0);
    signal inx_CN_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal LUT_tem1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal LUT_tem1_ce0 : STD_LOGIC;
    signal LUT_tem1_we0 : STD_LOGIC;
    signal LUT_tem1_d0 : STD_LOGIC_VECTOR (5 downto 0);
    signal LUT_tem1_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal LUT_tem_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal LUT_tem_ce0 : STD_LOGIC;
    signal LUT_tem_we0 : STD_LOGIC;
    signal LUT_tem_d0 : STD_LOGIC_VECTOR (4 downto 0);
    signal LUT_tem_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_ln35_reg_336 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_0_reg_347 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_0_reg_359 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal inx_tem_cnt_reg_370 : STD_LOGIC_VECTOR (31 downto 0);
    signal inx_tem_cnt_be_reg_382 : STD_LOGIC_VECTOR (31 downto 0);
    signal j2_0_reg_394 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal cnt_Rp_0_reg_405 : STD_LOGIC_VECTOR (31 downto 0);
    signal i8_0_reg_417 : STD_LOGIC_VECTOR (2 downto 0);
    signal i7_0_reg_428 : STD_LOGIC_VECTOR (2 downto 0);
    signal j8_0_reg_439 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal j7_0_reg_450 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal LUT_cnt_4_reg_461 : STD_LOGIC_VECTOR (31 downto 0);
    signal cnt_Rp_2_reg_471 : STD_LOGIC_VECTOR (31 downto 0);
    signal LUT_cnt_5_reg_482 : STD_LOGIC_VECTOR (31 downto 0);
    signal pun_tem1_6_reg_493 : STD_LOGIC_VECTOR (31 downto 0);
    signal L_in1_6_reg_504 : STD_LOGIC_VECTOR (31 downto 0);
    signal i5_0_reg_513 : STD_LOGIC_VECTOR (2 downto 0);
    signal i4_0_reg_524 : STD_LOGIC_VECTOR (2 downto 0);
    signal j5_0_reg_535 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal j4_0_reg_546 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal LUT_cnt_2_reg_557 : STD_LOGIC_VECTOR (31 downto 0);
    signal cnt_Rp_0_be_reg_567 : STD_LOGIC_VECTOR (31 downto 0);
    signal LUT_cnt_1_be_reg_579 : STD_LOGIC_VECTOR (31 downto 0);
    signal pun_tem1_1_be_reg_590 : STD_LOGIC_VECTOR (31 downto 0);
    signal L_in1_1_be_reg_601 : STD_LOGIC_VECTOR (31 downto 0);
    signal ii_0_reg_610 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal zext_ln35_fu_641_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln96_fu_685_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln99_fu_706_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln146_fu_726_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln195_1_fu_775_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln227_fu_811_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln227_fu_841_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln271_fu_940_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln262_fu_969_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln262_2_fu_973_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln249_fu_1011_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln249_2_fu_1020_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln249_1_fu_1024_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln186_fu_1151_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln186_2_fu_1155_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln174_fu_1193_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln174_2_fu_1202_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln174_1_fu_1206_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal L_in1_1_fu_106 : STD_LOGIC_VECTOR (31 downto 0);
    signal pun_tem1_0_fu_110 : STD_LOGIC_VECTOR (31 downto 0);
    signal LUT_cnt_1_fu_114 : STD_LOGIC_VECTOR (31 downto 0);
    signal pun_out_0_fu_118 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln262_1_fu_977_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln250_fu_1033_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln186_1_fu_1159_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln175_fu_1215_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln249_3_fu_1028_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln174_3_fu_1210_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_621_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln146_fu_716_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln146_fu_720_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln195_fu_741_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln135_fu_737_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln195_1_fu_751_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_757_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln195_fu_765_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln195_fu_745_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln195_2_fu_769_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln125_fu_790_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln227_1_fu_831_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln227_fu_835_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_4_fu_872_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_fu_896_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln271_fu_908_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln271_1_fu_917_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln271_1_fu_920_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln271_1_cast_fu_926_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln271_fu_911_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln271_2_fu_934_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln262_fu_957_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1262_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln249_fu_994_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln249_1_fu_1007_p2 : STD_LOGIC_VECTOR (14 downto 0);
    attribute use_dsp48 of add_ln249_1_fu_1007_p2 : signal is "no";
    signal icmp_ln283_fu_1048_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_1086_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_fu_1110_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln186_fu_1139_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1276_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln174_fu_1176_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln174_1_fu_1189_p2 : STD_LOGIC_VECTOR (14 downto 0);
    attribute use_dsp48 of add_ln174_1_fu_1189_p2 : signal is "no";
    signal grp_fu_1262_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1262_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln249_fu_1270_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln249_fu_1270_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1276_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1276_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln174_fu_1284_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln174_fu_1284_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_1262_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1276_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln174_fu_1284_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln249_fu_1270_p00 : STD_LOGIC_VECTOR (14 downto 0);

    component LastVN_mac_muladdcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component LastVN_mul_mul_6ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component LastVN_col_inx IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component LastVN_Lch_n IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component LastVN_LUT_decoder1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component LastVN_Estimated_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component LastVN_inx_CN IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (12 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component LastVN_LUT_tem1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (5 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component LastVN_LUT_tem IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (4 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;



begin
    col_inx_U : component LastVN_col_inx
    generic map (
        DataWidth => 12,
        AddressRange => 7680,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => col_inx_address0,
        ce0 => col_inx_ce0,
        q0 => col_inx_q0);

    Lch_n_U : component LastVN_Lch_n
    generic map (
        DataWidth => 2,
        AddressRange => 2560,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Lch_n_address0,
        ce0 => Lch_n_ce0,
        q0 => Lch_n_q0);

    LUT_decoder1_U : component LastVN_LUT_decoder1
    generic map (
        DataWidth => 3,
        AddressRange => 12032,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => LUT_decoder1_address0,
        ce0 => LUT_decoder1_ce0,
        q0 => LUT_decoder1_q0);

    Estimated_bit_U : component LastVN_Estimated_bkb
    generic map (
        DataWidth => 1,
        AddressRange => 2560,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Estimated_bit_address0,
        ce0 => Estimated_bit_ce0,
        we0 => Estimated_bit_we0,
        d0 => Estimated_bit_d0,
        q0 => Estimated_bit_q0);

    inx_CN_U : component LastVN_inx_CN
    generic map (
        DataWidth => 13,
        AddressRange => 2560,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inx_CN_address0,
        ce0 => inx_CN_ce0,
        we0 => inx_CN_we0,
        d0 => inx_CN_d0,
        q0 => inx_CN_q0);

    LUT_tem1_U : component LastVN_LUT_tem1
    generic map (
        DataWidth => 6,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => LUT_tem1_address0,
        ce0 => LUT_tem1_ce0,
        we0 => LUT_tem1_we0,
        d0 => LUT_tem1_d0,
        q0 => LUT_tem1_q0);

    LUT_tem_U : component LastVN_LUT_tem
    generic map (
        DataWidth => 5,
        AddressRange => 12032,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => LUT_tem_address0,
        ce0 => LUT_tem_ce0,
        we0 => LUT_tem_we0,
        d0 => LUT_tem_d0,
        q0 => LUT_tem_q0);

    LastVN_mac_muladdcud_U1 : component LastVN_mac_muladdcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 11,
        din2_WIDTH => 15,
        dout_WIDTH => 15)
    port map (
        din0 => grp_fu_1262_p0,
        din1 => grp_fu_1262_p1,
        din2 => trunc_ln241_reg_1454,
        dout => grp_fu_1262_p3);

    LastVN_mul_mul_6ndEe_U2 : component LastVN_mul_mul_6ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 11,
        dout_WIDTH => 15)
    port map (
        din0 => mul_ln249_fu_1270_p0,
        din1 => mul_ln249_fu_1270_p1,
        dout => mul_ln249_fu_1270_p2);

    LastVN_mac_muladdcud_U3 : component LastVN_mac_muladdcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 11,
        din2_WIDTH => 15,
        dout_WIDTH => 15)
    port map (
        din0 => grp_fu_1276_p0,
        din1 => grp_fu_1276_p1,
        din2 => trunc_ln165_reg_1429,
        dout => grp_fu_1276_p3);

    LastVN_mul_mul_6ndEe_U4 : component LastVN_mul_mul_6ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 11,
        dout_WIDTH => 15)
    port map (
        din0 => mul_ln174_fu_1284_p0,
        din1 => mul_ln174_fu_1284_p1,
        dout => mul_ln174_fu_1284_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    LUT_cnt_1_be_reg_579_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                LUT_cnt_1_be_reg_579 <= LUT_cnt_5_reg_482;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                LUT_cnt_1_be_reg_579 <= LUT_cnt_2_reg_557;
            end if; 
        end if;
    end process;

    LUT_cnt_1_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                LUT_cnt_1_fu_114 <= LUT_cnt_1_be_reg_579;
            elsif (((icmp_ln35_fu_646_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                LUT_cnt_1_fu_114 <= ap_const_lv32_FFFFFFFF;
            end if; 
        end if;
    end process;

    LUT_cnt_2_reg_557_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                if (((icmp_ln165_reg_1357 = ap_const_lv1_1) and (icmp_ln171_fu_1098_p2 = ap_const_lv1_1))) then 
                    LUT_cnt_2_reg_557 <= reg_629;
                elsif (((icmp_ln165_reg_1357 = ap_const_lv1_0) and (icmp_ln183_fu_1074_p2 = ap_const_lv1_1))) then 
                    LUT_cnt_2_reg_557 <= LUT_cnt_1_load_reg_1405;
                end if;
            end if; 
        end if;
    end process;

    LUT_cnt_4_reg_461_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                if (((icmp_ln165_reg_1357 = ap_const_lv1_1) and (icmp_ln246_fu_884_p2 = ap_const_lv1_1))) then 
                    LUT_cnt_4_reg_461 <= reg_629;
                elsif (((icmp_ln165_reg_1357 = ap_const_lv1_0) and (icmp_ln259_fu_860_p2 = ap_const_lv1_1))) then 
                    LUT_cnt_4_reg_461 <= LUT_cnt_1_load_reg_1405;
                end if;
            end if; 
        end if;
    end process;

    LUT_cnt_5_reg_482_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln229_fu_846_p2 = ap_const_lv1_0))) then 
                LUT_cnt_5_reg_482 <= LUT_cnt_1_load_reg_1405;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                LUT_cnt_5_reg_482 <= LUT_cnt_4_reg_461;
            end if; 
        end if;
    end process;

    L_in1_1_be_reg_601_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                L_in1_1_be_reg_601 <= select_ln283_1_fu_1062_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                L_in1_1_be_reg_601 <= L_fu_1226_p1;
            end if; 
        end if;
    end process;

    L_in1_6_reg_504_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln229_fu_846_p2 = ap_const_lv1_0))) then 
                L_in1_6_reg_504 <= L_in1_1_load_reg_1394;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                L_in1_6_reg_504 <= L_1_fu_1044_p1;
            end if; 
        end if;
    end process;

    cnt_Rp_0_be_reg_567_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                cnt_Rp_0_be_reg_567 <= cnt_Rp_2_reg_471;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                cnt_Rp_0_be_reg_567 <= cnt_Rp_fu_1220_p2;
            end if; 
        end if;
    end process;

    cnt_Rp_0_reg_405_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                cnt_Rp_0_reg_405 <= cnt_Rp_0_be_reg_567;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                cnt_Rp_0_reg_405 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    cnt_Rp_2_reg_471_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln229_fu_846_p2 = ap_const_lv1_0))) then 
                cnt_Rp_2_reg_471 <= cnt_Rp_0_reg_405;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                cnt_Rp_2_reg_471 <= cnt_Rp_1_fu_1038_p2;
            end if; 
        end if;
    end process;

    i4_0_reg_524_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln172_fu_1164_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                i4_0_reg_524 <= i4_reg_1580;
            elsif (((icmp_ln165_reg_1357 = ap_const_lv1_1) and (icmp_ln128_fu_805_p2 = ap_const_lv1_1) and (icmp_ln125_fu_794_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                i4_0_reg_524 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i5_0_reg_513_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln165_reg_1357 = ap_const_lv1_0) and (icmp_ln128_fu_805_p2 = ap_const_lv1_1) and (icmp_ln125_fu_794_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                i5_0_reg_513 <= ap_const_lv3_0;
            elsif (((icmp_ln184_fu_1127_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                i5_0_reg_513 <= i5_reg_1567;
            end if; 
        end if;
    end process;

    i7_0_reg_428_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln247_fu_982_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                i7_0_reg_428 <= i7_reg_1481;
            elsif (((icmp_ln165_reg_1357 = ap_const_lv1_1) and (icmp_ln229_fu_846_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                i7_0_reg_428 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i8_0_reg_417_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln165_reg_1357 = ap_const_lv1_0) and (icmp_ln229_fu_846_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                i8_0_reg_417 <= ap_const_lv3_0;
            elsif (((icmp_ln260_fu_945_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                i8_0_reg_417 <= i8_reg_1468;
            end if; 
        end if;
    end process;

    i_0_reg_347_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_fu_646_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_347 <= ap_const_lv12_0;
            elsif (((icmp_ln125_fu_794_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                i_0_reg_347 <= i_reg_1332;
            end if; 
        end if;
    end process;

    ii_0_reg_610_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln89_fu_657_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                ii_0_reg_610 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                ii_0_reg_610 <= ii_reg_1651;
            end if; 
        end if;
    end process;

    inx_tem_cnt_be_reg_382_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                if ((icmp_ln96_fu_695_p2 = ap_const_lv1_0)) then 
                    inx_tem_cnt_be_reg_382 <= inx_tem_cnt_reg_370;
                elsif ((icmp_ln96_fu_695_p2 = ap_const_lv1_1)) then 
                    inx_tem_cnt_be_reg_382 <= num_connected_CN_1_fu_700_p2;
                end if;
            end if; 
        end if;
    end process;

    inx_tem_cnt_reg_370_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                inx_tem_cnt_reg_370 <= inx_tem_cnt_be_reg_382;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln89_fu_657_p2 = ap_const_lv1_0))) then 
                inx_tem_cnt_reg_370 <= ap_const_lv32_FFFFFFFF;
            end if; 
        end if;
    end process;

    j2_0_reg_394_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                j2_0_reg_394 <= j2_reg_1416;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j2_0_reg_394 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    j4_0_reg_546_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln165_reg_1357 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln171_fu_1098_p2 = ap_const_lv1_0))) then 
                j4_0_reg_546 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                j4_0_reg_546 <= j4_reg_1612;
            end if; 
        end if;
    end process;

    j5_0_reg_535_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln165_reg_1357 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln183_fu_1074_p2 = ap_const_lv1_0))) then 
                j5_0_reg_535 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                j5_0_reg_535 <= j5_reg_1593;
            end if; 
        end if;
    end process;

    j7_0_reg_450_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln165_reg_1357 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln246_fu_884_p2 = ap_const_lv1_0))) then 
                j7_0_reg_450 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                j7_0_reg_450 <= j7_reg_1518;
            end if; 
        end if;
    end process;

    j8_0_reg_439_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln165_reg_1357 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln259_fu_860_p2 = ap_const_lv1_0))) then 
                j8_0_reg_439 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                j8_0_reg_439 <= j8_reg_1499;
            end if; 
        end if;
    end process;

    j_0_reg_359_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                j_0_reg_359 <= j_reg_1346;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln89_fu_657_p2 = ap_const_lv1_0))) then 
                j_0_reg_359 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    phi_ln35_reg_336_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln35_fu_646_p2 = ap_const_lv1_0))) then 
                phi_ln35_reg_336 <= add_ln35_fu_635_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_ln35_reg_336 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    pun_out_0_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (((icmp_ln165_reg_1357 = ap_const_lv1_1) and (icmp_ln171_fu_1098_p2 = ap_const_lv1_1)) or ((icmp_ln165_reg_1357 = ap_const_lv1_0) and (icmp_ln183_fu_1074_p2 = ap_const_lv1_1))))) then 
                pun_out_0_fu_118 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                pun_out_0_fu_118 <= select_ln283_fu_1054_p3;
            end if; 
        end if;
    end process;

    pun_tem1_1_be_reg_590_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                pun_tem1_1_be_reg_590 <= select_ln283_fu_1054_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                pun_tem1_1_be_reg_590 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    pun_tem1_6_reg_493_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln229_fu_846_p2 = ap_const_lv1_0))) then 
                pun_tem1_6_reg_493 <= pun_tem1_0_load_reg_1400;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                pun_tem1_6_reg_493 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                LUT_cnt_1_load_reg_1405 <= LUT_cnt_1_fu_114;
                L_in1_1_load_reg_1394 <= L_in1_1_fu_106;
                j2_reg_1416 <= j2_fu_799_p2;
                pun_tem1_0_load_reg_1400 <= pun_tem1_0_fu_110;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                LUT_tem1_addr_reg_1389 <= sext_ln195_1_fu_775_p1(4 - 1 downto 0);
                num_connected_CN_reg_1384 <= num_connected_CN_fu_731_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                L_in1_1_fu_106 <= L_in1_1_be_reg_601;
                pun_tem1_0_fu_110 <= pun_tem1_1_be_reg_590;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                L_in1_5_reg_1445 <= Lcn_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                add_ln174_2_reg_1633 <= add_ln174_2_fu_1198_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln172_fu_1164_p2 = ap_const_lv1_0))) then
                add_ln174_reg_1617 <= add_ln174_fu_1180_p2;
                mul_ln174_reg_1622 <= mul_ln174_fu_1284_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln184_fu_1127_p2 = ap_const_lv1_0))) then
                add_ln186_reg_1598 <= add_ln186_fu_1143_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                add_ln249_2_reg_1539 <= add_ln249_2_fu_1016_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln247_fu_982_p2 = ap_const_lv1_0))) then
                add_ln249_reg_1523 <= add_ln249_fu_998_p2;
                mul_ln249_reg_1528 <= mul_ln249_fu_1270_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln260_fu_945_p2 = ap_const_lv1_0))) then
                add_ln262_reg_1504 <= add_ln262_fu_961_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln165_reg_1357 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                i4_reg_1580 <= i4_fu_1104_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln165_reg_1357 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                i5_reg_1567 <= i5_fu_1080_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln165_reg_1357 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                i7_reg_1481 <= i7_fu_890_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln165_reg_1357 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                i8_reg_1468 <= i8_fu_866_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_reg_1332 <= i_fu_663_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln93_fu_673_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                icmp_ln165_reg_1357 <= icmp_ln165_fu_690_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                ii_reg_1651 <= ii_fu_1251_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                j4_reg_1612 <= j4_fu_1170_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                j5_reg_1593 <= j5_fu_1133_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                j7_reg_1518 <= j7_fu_988_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                j8_reg_1499 <= j8_fu_951_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                j_reg_1346 <= j_fu_679_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln165_reg_1357 = ap_const_lv1_1) and (icmp_ln229_fu_846_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((icmp_ln165_reg_1357 = ap_const_lv1_1) and (icmp_ln128_fu_805_p2 = ap_const_lv1_1) and (icmp_ln125_fu_794_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then
                reg_629 <= grp_fu_621_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln128_fu_805_p2 = ap_const_lv1_1) and (icmp_ln125_fu_794_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                trunc_ln165_reg_1429 <= trunc_ln165_fu_816_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln165_reg_1357 = ap_const_lv1_1) and (icmp_ln128_fu_805_p2 = ap_const_lv1_1) and (icmp_ln125_fu_794_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                trunc_ln171_reg_1435 <= trunc_ln171_fu_820_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln229_fu_846_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                trunc_ln241_reg_1454 <= trunc_ln241_fu_852_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln165_reg_1357 = ap_const_lv1_1) and (icmp_ln229_fu_846_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                trunc_ln246_reg_1460 <= trunc_ln246_fu_856_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln89_fu_657_p2 = ap_const_lv1_0))) then
                trunc_ln96_reg_1338 <= trunc_ln96_fu_669_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                    zext_ln133_reg_1369(11 downto 0) <= zext_ln133_fu_711_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln165_reg_1357 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln171_fu_1098_p2 = ap_const_lv1_0))) then
                    zext_ln172_reg_1585(4 downto 2) <= zext_ln172_fu_1118_p1(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln165_reg_1357 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln183_fu_1074_p2 = ap_const_lv1_0))) then
                    zext_ln184_reg_1572(4 downto 2) <= zext_ln184_fu_1094_p1(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln165_reg_1357 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln246_fu_884_p2 = ap_const_lv1_0))) then
                    zext_ln247_reg_1486(4 downto 2) <= zext_ln247_fu_904_p1(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln165_reg_1357 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln259_fu_860_p2 = ap_const_lv1_0))) then
                    zext_ln260_reg_1473(4 downto 2) <= zext_ln260_fu_880_p1(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) and (icmp_ln316_fu_1245_p2 = ap_const_lv1_0))) then
                    zext_ln318_reg_1656(9 downto 0) <= zext_ln318_fu_1257_p1(9 downto 0);
            end if;
        end if;
    end process;
    zext_ln133_reg_1369(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln260_reg_1473(1 downto 0) <= "00";
    zext_ln260_reg_1473(5) <= '0';
    zext_ln247_reg_1486(1 downto 0) <= "00";
    zext_ln247_reg_1486(5) <= '0';
    zext_ln184_reg_1572(1 downto 0) <= "00";
    zext_ln184_reg_1572(5) <= '0';
    zext_ln172_reg_1585(1 downto 0) <= "00";
    zext_ln172_reg_1585(5) <= '0';
    zext_ln318_reg_1656(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state9, icmp_ln125_fu_794_p2, icmp_ln128_fu_805_p2, icmp_ln165_reg_1357, ap_CS_fsm_state11, icmp_ln229_fu_846_p2, ap_CS_fsm_state2, icmp_ln35_fu_646_p2, ap_CS_fsm_state3, icmp_ln89_fu_657_p2, ap_CS_fsm_state4, icmp_ln93_fu_673_p2, ap_CS_fsm_state12, icmp_ln259_fu_860_p2, icmp_ln246_fu_884_p2, ap_CS_fsm_state13, icmp_ln260_fu_945_p2, ap_CS_fsm_state16, icmp_ln247_fu_982_p2, ap_CS_fsm_state21, icmp_ln183_fu_1074_p2, icmp_ln171_fu_1098_p2, ap_CS_fsm_state22, icmp_ln184_fu_1127_p2, ap_CS_fsm_state25, icmp_ln172_fu_1164_p2, ap_CS_fsm_state30, icmp_ln316_fu_1245_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln35_fu_646_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln89_fu_657_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln93_fu_673_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln125_fu_794_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((icmp_ln128_fu_805_p2 = ap_const_lv1_1) and (icmp_ln125_fu_794_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((icmp_ln229_fu_846_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state12 => 
                if (((icmp_ln165_reg_1357 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln246_fu_884_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (((icmp_ln165_reg_1357 = ap_const_lv1_1) and (icmp_ln246_fu_884_p2 = ap_const_lv1_1)) or ((icmp_ln165_reg_1357 = ap_const_lv1_0) and (icmp_ln259_fu_860_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                if (((icmp_ln260_fu_945_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state16 => 
                if (((icmp_ln247_fu_982_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state21 => 
                if (((icmp_ln165_reg_1357 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln171_fu_1098_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state21) and (((icmp_ln165_reg_1357 = ap_const_lv1_1) and (icmp_ln171_fu_1098_p2 = ap_const_lv1_1)) or ((icmp_ln165_reg_1357 = ap_const_lv1_0) and (icmp_ln183_fu_1074_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                if (((icmp_ln184_fu_1127_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state25 => 
                if (((icmp_ln172_fu_1164_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state30 => 
                if (((icmp_ln316_fu_1245_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    Estimated_bit_address0_assign_proc : process(ap_CS_fsm_state9, zext_ln133_reg_1369, ap_CS_fsm_state30, zext_ln318_fu_1257_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            Estimated_bit_address0 <= zext_ln318_fu_1257_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            Estimated_bit_address0 <= zext_ln133_reg_1369(12 - 1 downto 0);
        else 
            Estimated_bit_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    Estimated_bit_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            Estimated_bit_ce0 <= ap_const_logic_1;
        else 
            Estimated_bit_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Estimated_bit_d0 <= "1" when (signed(L_in1_1_fu_106) > signed(ap_const_lv32_2)) else "0";

    Estimated_bit_we0_assign_proc : process(ap_CS_fsm_state9, icmp_ln125_fu_794_p2)
    begin
        if (((icmp_ln125_fu_794_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            Estimated_bit_we0 <= ap_const_logic_1;
        else 
            Estimated_bit_we0 <= ap_const_logic_0;
        end if; 
    end process;


    LUT_decoder1_address0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state26, sext_ln249_fu_1011_p1, sext_ln174_fu_1193_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            LUT_decoder1_address0 <= sext_ln174_fu_1193_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            LUT_decoder1_address0 <= sext_ln249_fu_1011_p1(14 - 1 downto 0);
        else 
            LUT_decoder1_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    LUT_decoder1_ce0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            LUT_decoder1_ce0 <= ap_const_logic_1;
        else 
            LUT_decoder1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    LUT_tem1_address0_assign_proc : process(LUT_tem1_addr_reg_1389, ap_CS_fsm_state12, ap_CS_fsm_state21, ap_CS_fsm_state15, ap_CS_fsm_state18, ap_CS_fsm_state24, ap_CS_fsm_state27, sext_ln271_fu_940_p1, zext_ln262_2_fu_973_p1, zext_ln249_2_fu_1020_p1, zext_ln186_2_fu_1155_p1, zext_ln174_2_fu_1202_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            LUT_tem1_address0 <= zext_ln174_2_fu_1202_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            LUT_tem1_address0 <= zext_ln186_2_fu_1155_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            LUT_tem1_address0 <= LUT_tem1_addr_reg_1389;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            LUT_tem1_address0 <= zext_ln249_2_fu_1020_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            LUT_tem1_address0 <= zext_ln262_2_fu_973_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            LUT_tem1_address0 <= sext_ln271_fu_940_p1(4 - 1 downto 0);
        else 
            LUT_tem1_address0 <= "XXXX";
        end if; 
    end process;


    LUT_tem1_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state21, ap_CS_fsm_state15, ap_CS_fsm_state18, ap_CS_fsm_state24, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            LUT_tem1_ce0 <= ap_const_logic_1;
        else 
            LUT_tem1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    LUT_tem1_d0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state18, ap_CS_fsm_state24, ap_CS_fsm_state27, sext_ln262_1_fu_977_p1, zext_ln250_fu_1033_p1, sext_ln186_1_fu_1159_p1, zext_ln175_fu_1215_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            LUT_tem1_d0 <= zext_ln175_fu_1215_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            LUT_tem1_d0 <= sext_ln186_1_fu_1159_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            LUT_tem1_d0 <= zext_ln250_fu_1033_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            LUT_tem1_d0 <= sext_ln262_1_fu_977_p1;
        else 
            LUT_tem1_d0 <= "XXXXXX";
        end if; 
    end process;


    LUT_tem1_we0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state18, ap_CS_fsm_state24, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            LUT_tem1_we0 <= ap_const_logic_1;
        else 
            LUT_tem1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    LUT_tem_address0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state23, ap_CS_fsm_state18, ap_CS_fsm_state27, sext_ln262_fu_969_p1, sext_ln249_1_fu_1024_p1, sext_ln186_fu_1151_p1, sext_ln174_1_fu_1206_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            LUT_tem_address0 <= sext_ln174_1_fu_1206_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            LUT_tem_address0 <= sext_ln186_fu_1151_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            LUT_tem_address0 <= sext_ln249_1_fu_1024_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            LUT_tem_address0 <= sext_ln262_fu_969_p1(14 - 1 downto 0);
        else 
            LUT_tem_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    LUT_tem_ce0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state23, ap_CS_fsm_state18, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            LUT_tem_ce0 <= ap_const_logic_1;
        else 
            LUT_tem_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    LUT_tem_d0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state27, zext_ln249_3_fu_1028_p1, zext_ln174_3_fu_1210_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            LUT_tem_d0 <= zext_ln174_3_fu_1210_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            LUT_tem_d0 <= zext_ln249_3_fu_1028_p1;
        else 
            LUT_tem_d0 <= "XXXXX";
        end if; 
    end process;


    LUT_tem_we0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            LUT_tem_we0 <= ap_const_logic_1;
        else 
            LUT_tem_we0 <= ap_const_logic_0;
        end if; 
    end process;

        L_1_fu_1044_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(LUT_tem1_q0),32));

        L_fu_1226_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(LUT_tem1_q0),32));

    Lch_n_address0 <= zext_ln133_fu_711_p1(12 - 1 downto 0);

    Lch_n_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            Lch_n_ce0 <= ap_const_logic_1;
        else 
            Lch_n_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Lcn_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state10, sext_ln146_fu_726_p1, sext_ln227_fu_841_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            Lcn_address0 <= sext_ln227_fu_841_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            Lcn_address0 <= sext_ln146_fu_726_p1(13 - 1 downto 0);
        else 
            Lcn_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    Lcn_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            Lcn_ce0 <= ap_const_logic_1;
        else 
            Lcn_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln146_fu_720_p2 <= std_logic_vector(signed(ap_const_lv14_3FFF) + signed(zext_ln146_fu_716_p1));
    add_ln174_1_fu_1189_p2 <= std_logic_vector(unsigned(mul_ln174_reg_1622) + unsigned(trunc_ln171_reg_1435));
    add_ln174_2_fu_1198_p2 <= std_logic_vector(unsigned(mul_ln174_reg_1622) + unsigned(trunc_ln165_reg_1429));
    add_ln174_fu_1180_p2 <= std_logic_vector(unsigned(zext_ln172_reg_1585) + unsigned(zext_ln174_fu_1176_p1));
    add_ln186_fu_1143_p2 <= std_logic_vector(unsigned(zext_ln184_reg_1572) + unsigned(zext_ln186_fu_1139_p1));
    add_ln195_1_fu_751_p2 <= std_logic_vector(signed(ap_const_lv3_7) + signed(zext_ln135_fu_737_p1));
    add_ln195_2_fu_769_p2 <= std_logic_vector(signed(sext_ln195_fu_765_p1) + signed(add_ln195_fu_745_p2));
    add_ln195_fu_745_p2 <= std_logic_vector(signed(ap_const_lv6_3F) + signed(trunc_ln195_fu_741_p1));
    add_ln227_fu_835_p2 <= std_logic_vector(unsigned(zext_ln227_1_fu_831_p1) + unsigned(ap_const_lv14_3FFF));
    add_ln249_1_fu_1007_p2 <= std_logic_vector(unsigned(mul_ln249_reg_1528) + unsigned(trunc_ln246_reg_1460));
    add_ln249_2_fu_1016_p2 <= std_logic_vector(unsigned(mul_ln249_reg_1528) + unsigned(trunc_ln241_reg_1454));
    add_ln249_fu_998_p2 <= std_logic_vector(unsigned(zext_ln247_reg_1486) + unsigned(zext_ln249_fu_994_p1));
    add_ln262_fu_961_p2 <= std_logic_vector(unsigned(zext_ln260_reg_1473) + unsigned(zext_ln262_fu_957_p1));
    add_ln271_1_fu_920_p2 <= std_logic_vector(signed(ap_const_lv4_F) + signed(trunc_ln271_1_fu_917_p1));
    add_ln271_2_fu_934_p2 <= std_logic_vector(unsigned(sext_ln271_1_cast_fu_926_p3) + unsigned(add_ln271_fu_911_p2));
    add_ln271_fu_911_p2 <= std_logic_vector(signed(ap_const_lv6_3F) + signed(trunc_ln271_fu_908_p1));
    add_ln35_fu_635_p2 <= std_logic_vector(unsigned(phi_ln35_reg_336) + unsigned(ap_const_lv12_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state30, icmp_ln316_fu_1245_p2)
    begin
        if (((icmp_ln316_fu_1245_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state30, icmp_ln316_fu_1245_p2)
    begin
        if (((icmp_ln316_fu_1245_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cnt_Rp_1_fu_1038_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(cnt_Rp_0_reg_405));
    cnt_Rp_fu_1220_p2 <= std_logic_vector(unsigned(cnt_Rp_0_reg_405) + unsigned(ap_const_lv32_1));
    col_inx_address0 <= zext_ln96_fu_685_p1(13 - 1 downto 0);

    col_inx_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            col_inx_ce0 <= ap_const_logic_1;
        else 
            col_inx_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_address0 <= zext_ln318_reg_1656(9 - 1 downto 0);

    data_ce0_assign_proc : process(ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            data_ce0 <= ap_const_logic_1;
        else 
            data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_d0 <= Estimated_bit_q0;

    data_we0_assign_proc : process(ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            data_we0 <= ap_const_logic_1;
        else 
            data_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1262_p0 <= grp_fu_1262_p00(6 - 1 downto 0);
    grp_fu_1262_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln262_reg_1504),15));
    grp_fu_1262_p1 <= ap_const_lv15_2F0(11 - 1 downto 0);
    grp_fu_1276_p0 <= grp_fu_1276_p00(6 - 1 downto 0);
    grp_fu_1276_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln186_reg_1598),15));
    grp_fu_1276_p1 <= ap_const_lv15_2F0(11 - 1 downto 0);

    grp_fu_621_p1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state11, LUT_cnt_1_load_reg_1405, LUT_cnt_1_fu_114)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_621_p1 <= LUT_cnt_1_load_reg_1405;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_621_p1 <= LUT_cnt_1_fu_114;
        else 
            grp_fu_621_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_621_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(grp_fu_621_p1));
    i4_fu_1104_p2 <= std_logic_vector(unsigned(i4_0_reg_524) + unsigned(ap_const_lv3_1));
    i5_fu_1080_p2 <= std_logic_vector(unsigned(i5_0_reg_513) + unsigned(ap_const_lv3_1));
    i7_fu_890_p2 <= std_logic_vector(unsigned(i7_0_reg_428) + unsigned(ap_const_lv3_1));
    i8_fu_866_p2 <= std_logic_vector(unsigned(i8_0_reg_417) + unsigned(ap_const_lv3_1));
    i_fu_663_p2 <= std_logic_vector(unsigned(i_0_reg_347) + unsigned(ap_const_lv12_1));
    icmp_ln125_fu_794_p2 <= "1" when (signed(zext_ln125_fu_790_p1) < signed(num_connected_CN_reg_1384)) else "0";
    icmp_ln128_fu_805_p2 <= "1" when (j2_0_reg_394 = ap_const_lv31_0) else "0";
    icmp_ln165_fu_690_p2 <= "1" when (trunc_ln96_reg_1338 = ap_const_lv9_0) else "0";
    icmp_ln171_fu_1098_p2 <= "1" when (i4_0_reg_524 = ap_const_lv3_4) else "0";
    icmp_ln172_fu_1164_p2 <= "1" when (j4_0_reg_546 = ap_const_lv3_4) else "0";
    icmp_ln183_fu_1074_p2 <= "1" when (i5_0_reg_513 = ap_const_lv3_4) else "0";
    icmp_ln184_fu_1127_p2 <= "1" when (j5_0_reg_535 = ap_const_lv3_4) else "0";
    icmp_ln229_fu_846_p2 <= "1" when (pun_out_0_fu_118 = ap_const_lv32_0) else "0";
    icmp_ln246_fu_884_p2 <= "1" when (i7_0_reg_428 = ap_const_lv3_4) else "0";
    icmp_ln247_fu_982_p2 <= "1" when (j7_0_reg_450 = ap_const_lv3_4) else "0";
    icmp_ln259_fu_860_p2 <= "1" when (i8_0_reg_417 = ap_const_lv3_4) else "0";
    icmp_ln260_fu_945_p2 <= "1" when (j8_0_reg_439 = ap_const_lv3_4) else "0";
    icmp_ln283_fu_1048_p2 <= "1" when (pun_out_0_fu_118 = ap_const_lv32_1) else "0";
    icmp_ln316_fu_1245_p2 <= "1" when (ii_0_reg_610 = ap_const_lv10_3FF) else "0";
    icmp_ln35_fu_646_p2 <= "1" when (phi_ln35_reg_336 = ap_const_lv12_9FF) else "0";
    icmp_ln89_fu_657_p2 <= "1" when (i_0_reg_347 = ap_const_lv12_A00) else "0";
    icmp_ln93_fu_673_p2 <= "1" when (j_0_reg_359 = ap_const_lv13_1E00) else "0";
    icmp_ln96_fu_695_p2 <= "1" when (col_inx_q0 = i_reg_1332) else "0";
    ii_fu_1251_p2 <= std_logic_vector(unsigned(ii_0_reg_610) + unsigned(ap_const_lv10_1));

    inx_CN_address0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state5, zext_ln35_fu_641_p1, sext_ln99_fu_706_p1, zext_ln227_fu_811_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            inx_CN_address0 <= zext_ln227_fu_811_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            inx_CN_address0 <= sext_ln99_fu_706_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            inx_CN_address0 <= ap_const_lv64_0(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            inx_CN_address0 <= zext_ln35_fu_641_p1(12 - 1 downto 0);
        else 
            inx_CN_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    inx_CN_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            inx_CN_ce0 <= ap_const_logic_1;
        else 
            inx_CN_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    inx_CN_d0_assign_proc : process(ap_CS_fsm_state2, j_reg_1346, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            inx_CN_d0 <= j_reg_1346;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            inx_CN_d0 <= ap_const_lv13_0;
        else 
            inx_CN_d0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    inx_CN_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, icmp_ln96_fu_695_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((icmp_ln96_fu_695_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            inx_CN_we0 <= ap_const_logic_1;
        else 
            inx_CN_we0 <= ap_const_logic_0;
        end if; 
    end process;

    j2_fu_799_p2 <= std_logic_vector(unsigned(j2_0_reg_394) + unsigned(ap_const_lv31_1));
    j4_fu_1170_p2 <= std_logic_vector(unsigned(j4_0_reg_546) + unsigned(ap_const_lv3_1));
    j5_fu_1133_p2 <= std_logic_vector(unsigned(j5_0_reg_535) + unsigned(ap_const_lv3_1));
    j7_fu_988_p2 <= std_logic_vector(unsigned(j7_0_reg_450) + unsigned(ap_const_lv3_1));
    j8_fu_951_p2 <= std_logic_vector(unsigned(j8_0_reg_439) + unsigned(ap_const_lv3_1));
    j_fu_679_p2 <= std_logic_vector(unsigned(j_0_reg_359) + unsigned(ap_const_lv13_1));
    mul_ln174_fu_1284_p0 <= mul_ln174_fu_1284_p00(6 - 1 downto 0);
    mul_ln174_fu_1284_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln174_fu_1180_p2),15));
    mul_ln174_fu_1284_p1 <= ap_const_lv15_2F0(11 - 1 downto 0);
    mul_ln249_fu_1270_p0 <= mul_ln249_fu_1270_p00(6 - 1 downto 0);
    mul_ln249_fu_1270_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln249_fu_998_p2),15));
    mul_ln249_fu_1270_p1 <= ap_const_lv15_2F0(11 - 1 downto 0);
    num_connected_CN_1_fu_700_p2 <= std_logic_vector(unsigned(inx_tem_cnt_reg_370) + unsigned(ap_const_lv32_1));
    num_connected_CN_fu_731_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(inx_tem_cnt_reg_370));
    select_ln283_1_fu_1062_p3 <= 
        L_in1_5_reg_1445 when (icmp_ln283_fu_1048_p2(0) = '1') else 
        L_in1_6_reg_504;
    select_ln283_fu_1054_p3 <= 
        ap_const_lv32_0 when (icmp_ln283_fu_1048_p2(0) = '1') else 
        pun_tem1_6_reg_493;
        sext_ln146_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln146_fu_720_p2),64));

        sext_ln174_1_fu_1206_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln174_2_reg_1633),64));

        sext_ln174_fu_1193_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln174_1_fu_1189_p2),64));

        sext_ln186_1_fu_1159_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(LUT_tem_q0),6));

        sext_ln186_fu_1151_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1276_p3),64));

        sext_ln195_1_fu_775_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln195_2_fu_769_p2),64));

        sext_ln195_fu_765_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_757_p3),6));

        sext_ln227_fu_841_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln227_fu_835_p2),64));

        sext_ln249_1_fu_1024_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln249_2_reg_1539),64));

        sext_ln249_fu_1011_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln249_1_fu_1007_p2),64));

        sext_ln262_1_fu_977_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(LUT_tem_q0),6));

        sext_ln262_fu_969_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1262_p3),64));

    sext_ln271_1_cast_fu_926_p3 <= (add_ln271_1_fu_920_p2 & ap_const_lv2_0);
        sext_ln271_fu_940_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln271_2_fu_934_p2),64));

        sext_ln99_fu_706_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(num_connected_CN_1_fu_700_p2),64));

    tmp_1_fu_1110_p3 <= (i4_0_reg_524 & ap_const_lv2_0);
    tmp_2_fu_1086_p3 <= (i5_0_reg_513 & ap_const_lv2_0);
    tmp_3_fu_896_p3 <= (i7_0_reg_428 & ap_const_lv2_0);
    tmp_4_fu_872_p3 <= (i8_0_reg_417 & ap_const_lv2_0);
    tmp_fu_757_p3 <= (add_ln195_1_fu_751_p2 & ap_const_lv2_0);
    trunc_ln165_fu_816_p1 <= cnt_Rp_0_reg_405(15 - 1 downto 0);
    trunc_ln171_fu_820_p1 <= grp_fu_621_p2(15 - 1 downto 0);
    trunc_ln195_fu_741_p1 <= Lcn_q0(6 - 1 downto 0);
    trunc_ln241_fu_852_p1 <= cnt_Rp_0_reg_405(15 - 1 downto 0);
    trunc_ln246_fu_856_p1 <= grp_fu_621_p2(15 - 1 downto 0);
    trunc_ln271_1_fu_917_p1 <= L_in1_1_load_reg_1394(4 - 1 downto 0);
    trunc_ln271_fu_908_p1 <= L_in1_5_reg_1445(6 - 1 downto 0);
    trunc_ln96_fu_669_p1 <= i_0_reg_347(9 - 1 downto 0);
    zext_ln125_fu_790_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j2_0_reg_394),32));
    zext_ln133_fu_711_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_347),64));
    zext_ln135_fu_737_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Lch_n_q0),3));
    zext_ln146_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inx_CN_q0),14));
    zext_ln172_fu_1118_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_1110_p3),6));
    zext_ln174_2_fu_1202_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln174_reg_1617),64));
    zext_ln174_3_fu_1210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(LUT_decoder1_q0),5));
    zext_ln174_fu_1176_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j4_0_reg_546),6));
    zext_ln175_fu_1215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(LUT_decoder1_q0),6));
    zext_ln184_fu_1094_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_1086_p3),6));
    zext_ln186_2_fu_1155_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln186_reg_1598),64));
    zext_ln186_fu_1139_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j5_0_reg_535),6));
    zext_ln227_1_fu_831_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inx_CN_q0),14));
    zext_ln227_fu_811_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j2_0_reg_394),64));
    zext_ln247_fu_904_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_896_p3),6));
    zext_ln249_2_fu_1020_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln249_reg_1523),64));
    zext_ln249_3_fu_1028_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(LUT_decoder1_q0),5));
    zext_ln249_fu_994_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j7_0_reg_450),6));
    zext_ln250_fu_1033_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(LUT_decoder1_q0),6));
    zext_ln260_fu_880_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_872_p3),6));
    zext_ln262_2_fu_973_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln262_reg_1504),64));
    zext_ln262_fu_957_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j8_0_reg_439),6));
    zext_ln318_fu_1257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ii_0_reg_610),64));
    zext_ln35_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln35_reg_336),64));
    zext_ln96_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_359),64));
end behav;
